diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 654bebd8..b7096e0c 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -242,14 +242,13 @@ endif()
 # - external if EIGEN_INCLUDE_DIR_HINTS is defined
 # - internal if Eigen not found
 # ==============================================================================
-find_package(eigen3 QUIET)
-if (NOT eigen3_FOUND)
+find_package(Eigen3 QUIET NO_MODULE)
+if (NOT Eigen3_FOUND)
   set(EIGEN_INCLUDE_DIR_HINTS ${CMAKE_CURRENT_SOURCE_DIR}/third_party/eigen)
   set(OpenMVG_USE_INTERNAL_EIGEN ON)
-  find_package(Eigen QUIET)
-else()
-  set(EIGEN_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
+  find_package(Eigen3 REQUIRED NO_MODULE)
 endif()
+list(APPEND OPENMVG_LIBRARY_DEPENDENCIES Eigen3::Eigen)
 
 # ==============================================================================
 # Ceres
diff --git a/src/openMVG/features/CMakeLists.txt b/src/openMVG/features/CMakeLists.txt
index 8d47d94f..b7213c79 100644
--- a/src/openMVG/features/CMakeLists.txt
+++ b/src/openMVG/features/CMakeLists.txt
@@ -24,7 +24,6 @@ string(REPLACE " " ";" REPLACED_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
 target_compile_options(openMVG_features INTERFACE ${REPLACED_CMAKE_CXX_FLAGS})
 target_include_directories(openMVG_features
   PUBLIC
-    $<BUILD_INTERFACE:${EIGEN_INCLUDE_DIRS}>
     $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}>
     $<BUILD_INTERFACE:${CEREAL_INCLUDE_DIRS}>
     $<INSTALL_INTERFACE:include>
diff --git a/src/openMVG/numeric/CMakeLists.txt b/src/openMVG/numeric/CMakeLists.txt
index 06baee7c..40e87210 100644
--- a/src/openMVG/numeric/CMakeLists.txt
+++ b/src/openMVG/numeric/CMakeLists.txt
@@ -20,17 +20,10 @@ string(REPLACE " " ";" REPLACED_CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
 target_compile_options(openMVG_numeric INTERFACE ${REPLACED_CMAKE_CXX_FLAGS})
 target_include_directories(openMVG_numeric
   PUBLIC
-    $<BUILD_INTERFACE:${EIGEN_INCLUDE_DIRS}>
     $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}>
     $<INSTALL_INTERFACE:include>
 )
-if (DEFINED OpenMVG_USE_INTERNAL_EIGEN)
-  target_include_directories(openMVG_numeric PUBLIC
-    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/openMVG/third_party/eigen/>)
-else()
-  target_include_directories(openMVG_numeric PUBLIC
-    $<INSTALL_INTERFACE:${EIGEN_INCLUDE_DIRS}>)
-endif()
+target_link_libraries(openMVG_numeric PUBLIC Eigen3::Eigen)
 
 if (MSVC)
   target_compile_options(openMVG_numeric PUBLIC "-D_USE_MATH_DEFINES")
diff --git a/src/openMVG/system/CMakeLists.txt b/src/openMVG/system/CMakeLists.txt
index c5f2844e..0395f741 100644
--- a/src/openMVG/system/CMakeLists.txt
+++ b/src/openMVG/system/CMakeLists.txt
@@ -10,6 +10,5 @@ install(TARGETS openMVG_system DESTINATION lib/ EXPORT openMVG-targets)
 
 add_library(openMVG_progress_test INTERFACE)
 target_link_libraries(openMVG_progress_test INTERFACE ${OPENMVG_LIBRARY_DEPENDENCIES})
-target_include_directories(openMVG_progress_test INTERFACE ${EIGEN_INCLUDE_DIRS})
 
 UNIT_TEST(openMVG progress "openMVG_system;openMVG_progress_test;openMVG_testing")
diff --git a/src/software/SfM/CMakeLists.txt b/src/software/SfM/CMakeLists.txt
index 013a6c8e..8056c86b 100644
--- a/src/software/SfM/CMakeLists.txt
+++ b/src/software/SfM/CMakeLists.txt
@@ -175,8 +175,8 @@ target_link_libraries(openMVG_main_PointsFiltering
     openMVG_system
     openMVG_sfm
     ${STLPLUS_LIBRARY}
+    Eigen3::Eigen
 )
-target_include_directories(openMVG_main_PointsFiltering PRIVATE ${EIGEN_INCLUDE_DIRS})
 
 add_executable(openMVG_main_ChangeLocalOrigin main_ChangeLocalOrigin.cpp)
 target_link_libraries(openMVG_main_ChangeLocalOrigin
diff --git a/src/software/SfM/clustering/domSetLibrary/CMakeLists.txt b/src/software/SfM/clustering/domSetLibrary/CMakeLists.txt
index 41e8e068..470c38c5 100644
--- a/src/software/SfM/clustering/domSetLibrary/CMakeLists.txt
+++ b/src/software/SfM/clustering/domSetLibrary/CMakeLists.txt
@@ -1,4 +1,3 @@
 add_library( domset STATIC domset.cc domset.h types.h )
-target_include_directories(domset PUBLIC ${EIGEN_INCLUDE_DIRS})
-target_link_libraries(domset PRIVATE openMVG_matching)
+target_link_libraries(domset PRIVATE openMVG_matching Eigen3::Eigen)
 set_property(TARGET domset PROPERTY FOLDER OpenMVG/software/clustering)
diff --git a/src/testing/CMakeLists.txt b/src/testing/CMakeLists.txt
index 782a44a4..b1b79439 100644
--- a/src/testing/CMakeLists.txt
+++ b/src/testing/CMakeLists.txt
@@ -1,5 +1,6 @@
 add_library(openMVG_testing INTERFACE)
-target_include_directories(openMVG_testing INTERFACE ${CMAKE_SOURCE_DIR};${EIGEN_INCLUDE_DIRS})
+target_include_directories(openMVG_testing INTERFACE ${CMAKE_SOURCE_DIR})
+target_link_libraries(openMVG_testing INTERFACE Eigen3::Eigen)
 if (MSVC)
   target_compile_definitions(openMVG_testing INTERFACE "-D_USE_MATH_DEFINES")
 endif (MSVC)
diff --git a/src/third_party/ceres-solver/CMakeLists.txt b/src/third_party/ceres-solver/CMakeLists.txt
index 53ae7f95..d88b69c7 100644
--- a/src/third_party/ceres-solver/CMakeLists.txt
+++ b/src/third_party/ceres-solver/CMakeLists.txt
@@ -177,15 +177,15 @@ endif (IOS)
 unset(CERES_COMPILE_OPTIONS)
 
 # Eigen.
-find_package(Eigen REQUIRED)
-if (EIGEN_FOUND)
-  if (EIGEN_VERSION VERSION_LESS 3.1.0)
+find_package(Eigen3 3.1 REQUIRED)
+if (Eigen3_FOUND)
+  if (Eigen3_VERSION VERSION_LESS 3.1.0)
     message(FATAL_ERROR "-- Ceres requires Eigen version >= 3.1.0 in order "
       "that Eigen/SparseCore be available, detected version of Eigen is: "
-      "${EIGEN_VERSION}")
-  endif (EIGEN_VERSION VERSION_LESS 3.1.0)
+    "${Eigen3_VERSION}")
+  endif (Eigen3_VERSION VERSION_LESS 3.1.0)
 
-  message("-- Found Eigen version ${EIGEN_VERSION}: ${EIGEN_INCLUDE_DIRS}")
+  message("-- Found Eigen version ${Eigen3_VERSION}: ${Eigen3_INCLUDE_DIRS}")
   # Ensure that only MPL2 licensed code is part of the default build.
   message("")
   message("   ===============================================================")
@@ -197,13 +197,13 @@ if (EIGEN_FOUND)
     message("   Ceres Solver as the Simplicial Cholesky factorization in Eigen")
     message("   is licensed under the LGPL. ")
 
-    if (EIGEN_VERSION VERSION_LESS 3.2.2)
+    if (Eigen3_VERSION VERSION_LESS 3.2.2)
       message("   WARNING:")
       message("")
       message("   Your version of Eigen is older than version 3.2.2.")
       message("   The performance of SPARSE_NORMAL_CHOLESKY and SPARSE_SCHUR")
       message("   linear solvers will suffer. ")
-    endif (EIGEN_VERSION VERSION_LESS 3.2.2)
+    endif (Eigen3_VERSION VERSION_LESS 3.2.2)
 
   else (EIGENSPARSE)
     message("   Disabling the use of Eigen as a sparse linear algebra library.")
@@ -213,7 +213,7 @@ if (EIGEN_FOUND)
   endif (EIGENSPARSE)
     message("   ===============================================================")
     message("")
-endif (EIGEN_FOUND)
+endif (Eigen3_FOUND)
 
 # LAPACK (& BLAS).
 if (LAPACK)
@@ -495,7 +495,7 @@ include_directories(
 # Note that this is *not* propagated to clients, ie CERES_INCLUDE_DIRS
 # used by clients after find_package(Ceres) does not identify Eigen as
 # as system headers.
-include_directories(SYSTEM ${EIGEN_INCLUDE_DIRS})
+include_directories(SYSTEM ${Eigen3_INCLUDE_DIRS})
 
 if (SUITESPARSE)
   include_directories(${SUITESPARSE_INCLUDE_DIRS})
diff --git a/src/third_party/ceres-solver/cmake/CeresConfig.cmake.in b/src/third_party/ceres-solver/cmake/CeresConfig.cmake.in
index fa0697a4..db5d1316 100644
--- a/src/third_party/ceres-solver/cmake/CeresConfig.cmake.in
+++ b/src/third_party/ceres-solver/cmake/CeresConfig.cmake.in
@@ -214,27 +214,27 @@ endif()
 # Search quietly to control the timing of the error message if not found. The
 # search should be for an exact match, but for usability reasons do a soft
 # match and reject with an explanation below.
-find_package(Eigen ${CERES_EIGEN_VERSION} QUIET)
-if (EIGEN_FOUND)
-  if (NOT EIGEN_VERSION VERSION_EQUAL CERES_EIGEN_VERSION)
+find_package(Eigen3 ${CERES_EIGEN_VERSION} QUIET)
+if (Eigen3_FOUND)
+  if (NOT Eigen3_VERSION VERSION_EQUAL CERES_EIGEN_VERSION)
     # CMake's VERSION check in FIND_PACKAGE() will accept any version >= the
     # specified version. However, only version = is supported. Improve
     # usability by explaining why we don't accept non-exact version matching.
     ceres_report_not_found("Found Eigen dependency, but the version of Eigen "
-      "found (${EIGEN_VERSION}) does not exactly match the version of Eigen "
+      "found (${Eigen3_VERSION}) does not exactly match the version of Eigen "
       "Ceres was compiled with (${CERES_EIGEN_VERSION}). This can cause subtle "
       "bugs by triggering violations of the One Definition Rule. See the "
       "Wikipedia article http://en.wikipedia.org/wiki/One_Definition_Rule "
       "for more details")
   endif ()
   message(STATUS "Found required Ceres dependency: "
-    "Eigen version ${CERES_EIGEN_VERSION} in ${EIGEN_INCLUDE_DIRS}")
+    "Eigen version ${CERES_EIGEN_VERSION} in ${Eigen3_INCLUDE_DIRS}")
 else (EIGEN_FOUND)
   ceres_report_not_found("Missing required Ceres "
     "dependency: Eigen version ${CERES_EIGEN_VERSION}, please set "
     "EIGEN_INCLUDE_DIR.")
 endif (EIGEN_FOUND)
-list(APPEND CERES_INCLUDE_DIRS ${EIGEN_INCLUDE_DIRS})
+list(APPEND CERES_INCLUDE_DIRS ${Eigen3_INCLUDE_DIRS})
 
 # Glog.
 # Flag set during configuration and build of Ceres.
diff --git a/src/third_party/ceres-solver/include/ceres/internal/eigen.h b/src/third_party/ceres-solver/include/ceres/internal/eigen.h
index 7138804a..e9508992 100644
--- a/src/third_party/ceres-solver/include/ceres/internal/eigen.h
+++ b/src/third_party/ceres-solver/include/ceres/internal/eigen.h
@@ -31,7 +31,7 @@
 #ifndef CERES_INTERNAL_EIGEN_H_
 #define CERES_INTERNAL_EIGEN_H_
 
-#include "Eigen/Core"
+#include <Eigen/Core>
 
 namespace ceres {
 
diff --git a/src/third_party/ceres-solver/internal/ceres/CMakeLists.txt b/src/third_party/ceres-solver/internal/ceres/CMakeLists.txt
index 33c9b91f..8045925f 100644
--- a/src/third_party/ceres-solver/internal/ceres/CMakeLists.txt
+++ b/src/third_party/ceres-solver/internal/ceres/CMakeLists.txt
@@ -200,7 +200,7 @@ add_library(openMVG_ceres STATIC ${CERES_LIBRARY_SOURCE})
 set_target_properties(openMVG_ceres PROPERTIES
   VERSION ${CERES_VERSION}
   SOVERSION ${CERES_VERSION_MAJOR})
-
+target_link_libraries(openMVG_ceres PUBLIC Eigen3::Eigen)
 include(AppendTargetProperty)
 # Always build position-independent code (PIC), even when building Ceres as a
 # static library so that shared libraries can link against it, not just
@@ -236,7 +236,7 @@ else (BUILD_SHARED_LIBS)
   set(CERES_LIBRARY_DEPENDENCIES
         ${CERES_LIBRARY_PUBLIC_DEPENDENCIES}
         ${CERES_LIBRARY_PRIVATE_DEPENDENCIES})
-  target_link_libraries(openMVG_ceres ${CERES_LIBRARY_DEPENDENCIES})
+  target_link_libraries(openMVG_ceres PUBLIC ${CERES_LIBRARY_DEPENDENCIES})
 endif (BUILD_SHARED_LIBS)
 
 #install(TARGETS ceres
